{"version":3,"sources":["webpack:///../gatsby-theme-oi-wiki/src/styles/colors.ts","webpack:///../gatsby-theme-oi-wiki/src/pages/settings.tsx"],"names":["colors","color","desc","useConfig","createPersistedState","SettingsPage","props","location","defaultSettings","settings","setSettings","updateSetting","newSettings","finalSettings","undefined","window","ColorButton","background","classes","makeStyles","theme","root","palette","getContrastText","default","margin","padding","width","height","border","borderColor","divider","darken","label","lineHeight","textAlign","justifyContent","position","bottom","useStyles","Grid","item","Button","onClick","navColor","Layout","noMeta","noEdit","noToC","title","container","direction","spacing","FormControl","InputLabel","Select","value","darkMode","type","onChange","e","target","MenuItem","map","key"],"mappings":"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","file":"component---gatsby-theme-oi-wiki-src-pages-settings-tsx-fe09db0584a4503544d9.js","sourcesContent":["const colors: Array<{ desc: string, color: string }> = [\r\n  { color: 'auto', desc: 'auto' },\r\n  { color: '#FFF', desc: 'classical white' },\r\n  { color: '#A00', desc: 'Lily Red' },\r\n  { color: '#e91e63', desc: 'Margatroid Magenta' },\r\n  { color: '#222', desc: 'Breathy Darkness' },\r\n  { color: '#ef5350', desc: 'Red' },\r\n  { color: '#ab47bc', desc: 'Purple' },\r\n  { color: '#7e57c2', desc: 'Deep Purple' },\r\n  { color: '#3f51b5', desc: 'Indigo' },\r\n  { color: '#2196f3', desc: 'Blue' },\r\n  { color: '#03a9f4', desc: 'Light Blue' },\r\n  { color: '#00bcd4', desc: 'Cyan' },\r\n  { color: '#009688', desc: 'Teal' },\r\n  { color: '#4caf50', desc: 'Green' },\r\n  { color: '#7cb342', desc: 'Light Green' },\r\n  { color: '#c0ca33', desc: 'Lime' },\r\n  { color: '#f9a825', desc: 'Yellow' },\r\n  { color: '#ffa000', desc: 'Amber' },\r\n  { color: '#fb8c00', desc: 'Orange' },\r\n  { color: '#ff7043', desc: 'Deep Orange' },\r\n  { color: '#795548', desc: 'Brown' },\r\n  { color: '#757575', desc: 'Grey' },\r\n  { color: '#546e7a', desc: 'Blue Grey' },\r\n]\r\nexport default colors\r\n","import Grid from '@material-ui/core/Grid'\nimport React from 'react'\nimport createPersistedState from 'use-persisted-state'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport { makeStyles } from '@material-ui/core'\nimport { darken } from '@material-ui/core/styles/colorManipulator'\nimport Layout from '../components/Layout'\nimport defaultSettings from '../lib/defaultSettings'\nimport colors from '../styles/colors'\n\nconst useConfig = createPersistedState('settings')\ntype SettingsPageProps = {\n  location: string\n}\nconst SettingsPage: React.FC<SettingsPageProps> = (props: SettingsPageProps) => {\n  const { location } = props\n  const [settings, setSettings] = useConfig(defaultSettings)\n  const updateSetting = (newSettings): void => {\n    const finalSettings = { ...defaultSettings, ...settings, ...newSettings }\n    setSettings(finalSettings)\n    // eslint-disable-next-line dot-notation\n    window !== undefined && window['onthemechange'](finalSettings)\n  }\n  type ColorButtonProp = { color: string, desc: string }\n  const ColorButton: React.FC<ColorButtonProp> = (props: ColorButtonProp) => {\n    const background = props.color === 'auto'\n      ? undefined // inherit settings\n      : props.color\n\n    const useStyles = makeStyles((theme) => ({\n      root: {\n        background,\n        color: theme.palette.getContrastText(background || theme.palette.background.default),\n        margin: '1em 1.2em 1em 0',\n        padding: 0,\n        width: '8em',\n        height: '8em',\n        border: '.1em solid',\n        borderColor: theme.palette.divider,\n        '&:hover': {\n          background: background ? darken(background, 0.2) : undefined,\n        },\n      },\n      label: {\n        margin: '0 .4em',\n        lineHeight: '1.2em',\n        textAlign: 'left',\n        justifyContent: 'left',\n        position: 'absolute',\n        bottom: '.2em',\n      },\n    }))\n\n    const classes = useStyles()\n    return (\n      <Grid item>\n        <Button\n          classes={classes}\n          onClick={() => {\n            updateSetting({\n              theme: {\n                navColor: props.color,\n              },\n            })\n          }}\n        >\n          { props.desc }\n        </Button>\n      </Grid>\n    )\n  }\n\n  return (\n    <Layout\n      location={location}\n      noMeta=\"true\"\n      noEdit=\"true\"\n      noToC=\"true\"\n      title=\"设置\"\n    >\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <FormControl>\n            <InputLabel>暗色模式</InputLabel>\n            <Select\n              value={settings.darkMode.type}\n              onChange={(e) => {\n                updateSetting({\n                  darkMode: {\n                    type: e.target.value,\n                  },\n                })\n              }}\n            >\n              <MenuItem value=\"user-preference\">跟随系统</MenuItem>\n              <MenuItem value=\"always-on\">总是打开</MenuItem>\n              <MenuItem value=\"always-off\">总是关闭</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          导航栏颜色\n          <Grid container>\n            {colors.map(props => (<ColorButton {...props} key={props.color}/>))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Layout>\n  )\n}\n\nexport default SettingsPage\n"],"sourceRoot":""}